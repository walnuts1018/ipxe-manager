// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/Code-Hex/synchro/tz"
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"github.com/walnuts1018/ipxe-manager/config"
	"github.com/walnuts1018/ipxe-manager/infrastructure/auth"
	"github.com/walnuts1018/ipxe-manager/infrastructure/database"
	"github.com/walnuts1018/ipxe-manager/router"
	"github.com/walnuts1018/ipxe-manager/router/handler"
	"github.com/walnuts1018/ipxe-manager/usecase"
	"github.com/walnuts1018/ipxe-manager/util/clock"
	"github.com/walnuts1018/ipxe-manager/util/random"
)

// Injectors from wire.go:

func CreateRouter(ctx context.Context, cfg *config.Config, db *database.DB, clock2 clock.Clock[tz.AsiaTokyo]) (*echo.Echo, error) {
	appConfig := &cfg.App
	oAuth2Config := cfg.OAuth2
	authService, err := auth.NewAuthService(ctx, oAuth2Config)
	if err != nil {
		return nil, err
	}
	randomRandom := random.New()
	usecaseUsecase := usecase.NewUsecase(cfg, db, authService, randomRandom, clock2)
	handlerHandler := handler.NewHandler(usecaseUsecase, randomRandom)
	echoEcho := router.NewRouter(appConfig, handlerHandler)
	return echoEcho, nil
}

// wire.go:

var authSet = wire.NewSet(auth.NewAuthService, wire.Bind(new(usecase.AuthService), new(*auth.AuthService)))

var configSet = wire.FieldsOf(new(*config.Config),
	"App",
	"OAuth2",
)
